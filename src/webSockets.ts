/**
 * @fileoverview WebSocket –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–ª–∞–∫—Ç–∏–∫–æ–π –∑–≤—ë–∑–¥
 * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∑–∏—Ü–∏–π –∑–≤—ë–∑–¥ –∏ real-time –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é
 */

import { Elysia, t } from 'elysia'
import { randomColorOKLCH } from './colors';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–≤–µ–∑–¥—ã –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–µ
 * @interface Star
 */
export interface Star
{
    /** –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–≤–µ–∑–¥—ã (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ID –∫–ª–∏–µ–Ω—Ç–∞) */
    id: string;
    /** –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –∑–≤–µ–∑–¥—ã –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ */
    x: number;
    /** –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –∑–≤–µ–∑–¥—ã –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ */
    y: number;
    /** –¶–≤–µ—Ç –∑–≤–µ–∑–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ OKLCH */
    color: string;
}

/**
 * –ö–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
 * @constant {string}
 */
const DEFAULT_CHANNEL = 'test';

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤—ë–∑–¥ –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–µ
 * @description –ö–ª—é—á - ID –∫–ª–∏–µ–Ω—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–±—ä–µ–∫—Ç –∑–≤–µ–∑–¥—ã
 * @type {Record<string, Star>}
 */
const stars: Record<string, Star> = {};
console.log('‚≠ê Stars cleared')

/**
 * WebSocket –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –≥–∞–ª–∞–∫—Ç–∏–∫–µ –∑–≤—ë–∑–¥
 * @description –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç WebSocket endpoint —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
 */
const webSocketsRoute = new Elysia()
.ws('/ws',
{
    /**
     * –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
     * @description –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–Ω–∞–ª –∏ –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
     */
    body: t.Object(
    {
        /** –ö–∞–Ω–∞–ª –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */
        channel: t.String(),
        /** –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ª—é–±–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö) */
        payload: t.Any(),
    }),

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     * @description –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Ü–≤–µ—Ç, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª
     * –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–≤—ë–∑–¥–∞–º–∏
     */
    open(ws)
    {
        const clientId = ws.id;
        const color = randomColorOKLCH();

        ws.subscribe(DEFAULT_CHANNEL);
        ws.send(
        {
            channel: DEFAULT_CHANNEL,
            payload:
            {
                id: 'connect',
                clientId, color
            }
        });

        Object.keys(stars).forEach((id) =>
        {
            const star = stars[id];
            ws.send(
            {
                channel: DEFAULT_CHANNEL,
                payload:
                {
                    ...star,
                    id: 'new',
                    clientId: star.id
                }
            });
        })

        ws.publish(DEFAULT_CHANNEL, 
        {
            channel: DEFAULT_CHANNEL,
            payload:
            {
                id: 'new',
                clientId, color
            }
        });

        stars[clientId] = { id: clientId, x: 0, y: 0, color };

        console.log('üëΩ Connected client:', clientId);
        console.log('‚≠ê Stars:', Object.keys(stars).length);
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
     * @description –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    message(ws, message) 
    {
        const { channel, payload } = message;
        const { id, client } = payload;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∑–≤–µ–∑–¥—ã
        if (id === 'position')
        {
            const { x, y } = payload;
            stars[client].x = x;
            stars[client].y = y;

            // –†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            ws.publish(DEFAULT_CHANNEL, 
            {
                channel: DEFAULT_CHANNEL,
                payload:
                {
                    id: 'position',
                    clientId: client, x, y
                }
            })

            console.log('üèì Position updated:', { x, y });
            return;
        }
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     * @description –£–≤–µ–¥–æ–º–ª—è–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
     */
    close(ws, code, reason) 
    {
        const clientId = ws.id;

        ws.publish(DEFAULT_CHANNEL, 
        {
            channel: DEFAULT_CHANNEL,
            payload:
            {
                id: 'disconnect',
                clientId
            }
        })

        ws.unsubscribe(DEFAULT_CHANNEL);
        delete stars[clientId];

        console.log('üíÄ Disconnected client:', clientId);
        console.log('‚≠ê Stars:', Object.keys(stars).length);
    },
})

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ WebSocket –º–∞—Ä—à—Ä—É—Ç–∞
 * @description –ì–æ—Ç–æ–≤—ã–π –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Elysia –ø–ª–∞–≥–∏–Ω —Å WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 * –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–ª–∞–∫—Ç–∏–∫–æ–π –∑–≤—ë–∑–¥
 */
export default webSocketsRoute;